#!/usr/bin/env python3
"""
TÃœBÄ°TAK Analiz FastAPI UygulamasÄ±
"""

from fastapi import FastAPI, BackgroundTasks, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import threading
import time
import json
import os
from datetime import datetime
from typing import Dict, List, Optional
import asyncio
from scheduler import analyze_active_calls
from main import main as run_full_analysis

# FastAPI uygulamasÄ±
app = FastAPI(title="TÃœBÄ°TAK Analiz Sistemi", description="TÃœBÄ°TAK program analizi ve aktif Ã§aÄŸrÄ± takibi", version="1.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Global durum deÄŸiÅŸkenleri
class SystemState:
    def __init__(self):
        self.is_scheduler_running = False
        self.is_analysis_running = False
        self.scheduler_thread = None
        self.analysis_thread = None
        self.last_analysis_time = None
        self.last_active_analysis_time = None
        self.analysis_status = "HazÄ±r"
        self.scheduler_status = "Durduruldu"


# Global sistem durumu
system_state = SystemState()

# ZamanlayÄ±cÄ± saatleri - dinamik liste
SCHEDULER_TIMES = ["08:00", "12:00", "17:00", "00:00"]


# ZamanlayÄ±cÄ± baÅŸlatma fonksiyonu
def start_scheduler():
    """ZamanlayÄ±cÄ±yÄ± baÅŸlatÄ±r."""
    system_state.is_scheduler_running = True
    system_state.scheduler_status = "Ã‡alÄ±ÅŸÄ±yor"

    def run_scheduler():
        import schedule

        while system_state.is_scheduler_running:
            # Her dÃ¶ngÃ¼de zamanlayÄ±cÄ±larÄ± temizle ve yeniden oluÅŸtur
            schedule.clear()

            # Mevcut saatlerle zamanlayÄ±cÄ±larÄ± oluÅŸtur
            current_times = SCHEDULER_TIMES.copy()
            # print(f"ZamanlayÄ±cÄ± saatleri: {current_times}")

            for time_str in current_times:
                schedule.every().day.at(time_str).do(analyze_active_calls)
                # print(f"ZamanlayÄ±cÄ± eklendi: {time_str}")

            # 60 saniye boyunca zamanlayÄ±cÄ±larÄ± kontrol et
            for i in range(60):
                if not system_state.is_scheduler_running:
                    break
                schedule.run_pending()
                time.sleep(1)

    system_state.scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    system_state.scheduler_thread.start()
    print("ğŸš€ ZamanlayÄ±cÄ± baÅŸlatÄ±ldÄ±")


# Uygulama baÅŸladÄ±ÄŸÄ±nda zamanlayÄ±cÄ±yÄ± otomatik baÅŸlat
start_scheduler()


@app.get("/", response_class=HTMLResponse)
async def get_home():
    """Ana sayfa HTML'ini dÃ¶ndÃ¼rÃ¼r."""
    try:
        with open("templates/index.html", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return HTMLResponse("<h1>HTML dosyasÄ± bulunamadÄ±!</h1>", status_code=404)


@app.get("/api/status")
async def get_status():
    """Sistem durumunu dÃ¶ndÃ¼rÃ¼r."""
    # Log'u sadece durum deÄŸiÅŸtiÄŸinde gÃ¶ster
    return {
        "is_analysis_running": system_state.is_analysis_running,
        "is_scheduler_running": system_state.is_scheduler_running,
        "analysis_status": system_state.analysis_status,
        "scheduler_status": system_state.scheduler_status,
        "last_analysis_time": system_state.last_analysis_time,
        "last_active_analysis_time": system_state.last_active_analysis_time,
    }


@app.get("/api/scheduler-times")
async def get_scheduler_times():
    """ZamanlayÄ±cÄ± saatlerini dÃ¶ndÃ¼rÃ¼r."""
    return {"times": SCHEDULER_TIMES, "count": len(SCHEDULER_TIMES)}


@app.get("/api/scheduler-debug")
async def get_scheduler_debug():
    """ZamanlayÄ±cÄ± debug bilgilerini dÃ¶ndÃ¼rÃ¼r."""
    import schedule

    return {
        "current_times": SCHEDULER_TIMES,
        "is_scheduler_running": system_state.is_scheduler_running,
        "scheduled_jobs": len(schedule.jobs),
        "jobs": [str(job) for job in schedule.jobs],
    }


@app.post("/api/scheduler-times/add")
async def add_scheduler_time(time_str: str):
    """Yeni zamanlayÄ±cÄ± saati ekler."""
    global SCHEDULER_TIMES

    # Saat formatÄ±nÄ± kontrol et (HH:MM)
    import re

    if not re.match(r"^([01]?[0-9]|2[0-3]):[0-5][0-9]$", time_str):
        raise HTTPException(status_code=400, detail="GeÃ§ersiz saat formatÄ±! HH:MM formatÄ±nda olmalÄ±.")

    if time_str in SCHEDULER_TIMES:
        raise HTTPException(status_code=400, detail="Bu saat zaten mevcut!")

    SCHEDULER_TIMES.append(time_str)
    SCHEDULER_TIMES.sort()  # Saatleri sÄ±rala

    return {"message": f"Saat {time_str} eklendi", "times": SCHEDULER_TIMES}


@app.delete("/api/scheduler-times/remove")
async def remove_scheduler_time(time_str: str):
    """ZamanlayÄ±cÄ± saatini kaldÄ±rÄ±r."""
    global SCHEDULER_TIMES

    if time_str not in SCHEDULER_TIMES:
        raise HTTPException(status_code=404, detail="Bu saat bulunamadÄ±!")

    SCHEDULER_TIMES.remove(time_str)

    return {"message": f"Saat {time_str} kaldÄ±rÄ±ldÄ±", "times": SCHEDULER_TIMES}


@app.post("/api/start-full-analysis")
async def start_full_analysis(background_tasks: BackgroundTasks):
    """TÃ¼m Ã§aÄŸrÄ±larÄ± analiz et iÅŸlemini baÅŸlatÄ±r."""
    if system_state.is_analysis_running:
        raise HTTPException(status_code=400, detail="Analiz iÅŸlemi zaten devam ediyor!")

    system_state.is_analysis_running = True
    system_state.analysis_status = "Ã‡alÄ±ÅŸÄ±yor"

    def run_analysis():
        try:
            run_full_analysis()
            system_state.last_analysis_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        except Exception as e:
            print(f"Analiz hatasÄ±: {str(e)}")
        finally:
            system_state.is_analysis_running = False
            system_state.analysis_status = "HazÄ±r"

    background_tasks.add_task(run_analysis)

    return {"message": "Tam analiz baÅŸlatÄ±ldÄ±"}


@app.post("/api/start-active-analysis")
async def start_active_analysis(background_tasks: BackgroundTasks):
    """Aktif Ã§aÄŸrÄ±larÄ± analiz et iÅŸlemini baÅŸlatÄ±r."""
    if system_state.is_analysis_running:
        raise HTTPException(status_code=400, detail="Analiz iÅŸlemi zaten devam ediyor!")

    system_state.is_analysis_running = True
    system_state.analysis_status = "Ã‡alÄ±ÅŸÄ±yor"

    def run_active_analysis():
        try:
            analyze_active_calls()
            system_state.last_active_analysis_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        except Exception as e:
            print(f"Aktif analiz hatasÄ±: {str(e)}")
        finally:
            system_state.is_analysis_running = False
            system_state.analysis_status = "HazÄ±r"

    background_tasks.add_task(run_active_analysis)

    return {"message": "Aktif Ã§aÄŸrÄ± analizi baÅŸlatÄ±ldÄ±"}


@app.post("/api/toggle-scheduler")
async def toggle_scheduler():
    """ZamanlayÄ±cÄ±yÄ± baÅŸlatÄ±r/durdurur."""
    if system_state.is_scheduler_running:
        # ZamanlayÄ±cÄ±yÄ± durdur
        system_state.is_scheduler_running = False
        system_state.scheduler_status = "Durduruldu"
        if system_state.scheduler_thread:
            system_state.scheduler_thread = None
        return {"message": "ZamanlayÄ±cÄ± durduruldu"}
    else:
        # ZamanlayÄ±cÄ±yÄ± baÅŸlat
        start_scheduler()
        return {"message": "ZamanlayÄ±cÄ± baÅŸlatÄ±ldÄ±"}


@app.post("/api/stop-all")
async def stop_all():
    """TÃ¼m iÅŸlemleri durdurur."""
    system_state.is_analysis_running = False
    system_state.is_scheduler_running = False
    system_state.analysis_status = "HazÄ±r"
    system_state.scheduler_status = "Durduruldu"

    if system_state.scheduler_thread:
        system_state.scheduler_thread = None

    return {"message": "TÃ¼m iÅŸlemler durduruldu"}


@app.get("/api/results")
async def get_results():
    """Analiz sonuÃ§larÄ±nÄ± dÃ¶ndÃ¼rÃ¼r."""
    try:
        # Son analiz dosyalarÄ±nÄ± bul
        html_files = []
        json_files = []

        if os.path.exists("ai_analyse_results_html"):
            for file in os.listdir("ai_analyse_results_html"):
                if file.endswith(".html"):
                    html_files.append(file)

        if os.path.exists("ai_analyse_results_json"):
            for file in os.listdir("ai_analyse_results_json"):
                if file.endswith(".json"):
                    json_files.append(file)

        # Aktif Ã§aÄŸrÄ± analiz sonuÃ§larÄ±
        active_analysis_files = []
        if os.path.exists("active_calls_analysis_output"):
            for file in os.listdir("active_calls_analysis_output"):
                if file.endswith(".json"):
                    active_analysis_files.append(file)

        return {
            "html_files": sorted(html_files, reverse=True)[:5],  # Son 5 dosya
            "json_files": sorted(json_files, reverse=True)[:5],
            "active_analysis_files": sorted(active_analysis_files, reverse=True)[:5],
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"SonuÃ§lar alÄ±nÄ±rken hata: {str(e)}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
